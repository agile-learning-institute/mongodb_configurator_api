version: "1.1"
name: Test Configurations Endpoints
env:
  host: localhost:8081

tests:
  configurations:
    name: Test Configurations Endpoints
    steps:
      # Setup - Delete test file if it exists (no checks needed)
      - name: Delete Test Configuration (Setup)
        http:
          url: http://${{env.host}}/api/configurations/test_config.yaml/
          method: DELETE
          check:
            status: /200|500/
      
      # Create - PUT new configuration
      - name: Create Test Configuration
        http:
          url: http://${{env.host}}/api/configurations/test_config.yaml/
          method: PUT
          headers:
            Content-Type: application/json
          body: |
            {
              "name": "test_collection",
              "description": "Test collection for stepCI testing",
              "versions": [
                {
                  "version": "1.0.0.1",
                  "drop_indexes": [],
                  "migrations": [],
                  "add_indexes": [],
                  "test_data": "test_data.1.0.0.1.json"
                }
              ]
            }
          check:
            status: /200/
      
      # Read - GET the created configuration
      - name: Get Test Configuration
        http:
          url: http://${{env.host}}/api/configurations/test_config.yaml/
          method: GET
          check:
            status: /200/
      
      # Update - PUT to modify the configuration
      - name: Update Test Configuration
        http:
          url: http://${{env.host}}/api/configurations/test_config.yaml/
          method: PUT
          headers:
            Content-Type: application/json
          body: |
            {
              "name": "test_collection_updated",
              "description": "Updated test collection for stepCI testing",
              "versions": [
                {
                  "version": "1.0.0.1",
                  "drop_indexes": [],
                  "migrations": [],
                  "add_indexes": [],
                  "test_data": "test_data.1.0.0.1.json"
                },
                {
                  "version": "1.0.1.2",
                  "drop_indexes": [],
                  "migrations": [],
                  "add_indexes": [],
                  "test_data": "test_data.1.0.1.2.json"
                }
              ]
            }
          check:
            status: /200/
      
      # Lock - PATCH to lock the configuration
      - name: Lock Test Configuration
        http:
          url: http://${{env.host}}/api/configurations/test_config.yaml/
          method: PATCH
          check:
            status: /200/
      
      # Unlock - PATCH to unlock the configuration
      - name: Unlock Test Configuration
        http:
          url: http://${{env.host}}/api/configurations/test_config.yaml/
          method: PATCH
          check:
            status: /200/
      
      # Cleanup - DELETE the test configuration
      - name: Delete Test Configuration (Cleanup)
        http:
          url: http://${{env.host}}/api/configurations/test_config.yaml/
          method: DELETE
          check:
            status: /200/
      
      # Test collection creation endpoint
      - name: Create Collection from Template
        http:
          url: http://${{env.host}}/api/configurations/collection/test_collection/
          method: POST
          check:
            status: /200/
      
      # Cleanup created collection
      - name: Delete Created Collection
        http:
          url: http://${{env.host}}/api/configurations/test_collection.yaml/
          method: DELETE
          check:
            status: /200/
      
      # Test schema rendering endpoints
      - name: Get JSON Schema
        http:
          url: http://${{env.host}}/api/configurations/json_schema/sample/1.0.0.1/
          method: GET
          check:
            status: /200/
      
      - name: Get BSON Schema
        http:
          url: http://${{env.host}}/api/configurations/bson_schema/sample/1.0.0.1/
          method: GET
          check:
            status: /200/
      
      # Test bulk operations
      - name: List All Configurations
        http:
          url: http://${{env.host}}/api/configurations/
          method: GET
          check:
            status: /200/
      
      - name: Process All Configurations
        http:
          url: http://${{env.host}}/api/configurations/
          method: POST
          check:
            status: /200/
      
      - name: Clean All Configurations
        http:
          url: http://${{env.host}}/api/configurations/
          method: PATCH
          check:
            status: /200/
