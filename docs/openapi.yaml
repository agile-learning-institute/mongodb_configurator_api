openapi: 3.0.3
info:
  title: MongoDB Schema Management API
  description: API for managing MongoDB collections, indexes, and migrations
  version: 1.0.0
  contact:
    email: devs@agile-learning.institute
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /api/configurations/:
    get:
      summary: List all Collection Configurations
      operationId: list_configurations
      responses:
        '200':
          description: List of collections configuration files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    post:
      summary: Process all Configured Collections 
      operationId: process_collections
      responses:
        '200':
          description: All configured collections processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    patch:
      summary: Clean all Collection Configurations
      operationId: clean_configurations
      responses:
        '200':
          description: All configurations cleaned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
  /api/configurations/{file_name}/:
    get:
      summary: Get a collection configuration
      operationId: get_configuration
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    put:
      summary: Save a collection configuration
      operationId: save_configuration
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    post:
      summary: Process a collection configuration
      operationId: process_collection
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection configured successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    delete:
      summary: Delete a collection configuration
      operationId: delete_configuration
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection configuration deleted
          content:    
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    patch:
      summary: Lock/Unlock a collection configuration
      operationId: lock_unlock_configuration
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection configuration locked/unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
  
  /api/configurations/json_schema/{file_name}/{version_number}/:
    get:
      summary: Get a Json Schema rendered for a schema
      description: Json Schema for a specific schema version (e.g., "sample.1.0.0.1")
      operationId: render_json_schema
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
            description: Configuration version file name (e.g., "sample.yaml")
        - name: version_number
          in: path
          required: true
          schema:
            type: string
            description: Version number (e.g., "1.0.0.1")
      responses:
        '200':
          description: Schema
          content:
            text/json:
              schema:
                type: object
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'

  /api/configurations/bson_schema/{file_name}/{version_number}/:
    get:
      summary: Get a Bson Schema rendered for a schema
      description: Bson Schema for a specific schema version (e.g., "sample.1.0.0.1")
      operationId: render_bson_schema
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
            description: Configuration version file name (e.g., "sample.yaml")
        - name: version_number
          in: path
          required: true
          schema:
            type: string
            description: Version number (e.g., "1.0.0.1")
      responses:
        '200':
          description: Schema
          content:
            text/json:
              schema:
                type: object
       '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'

  /api/configurations/collection/{name}:
    post:
      summary: Create a new collection
      description: |
        Creates a new collection by generating configuration and dictionary files from templates.
        This endpoint creates both a configuration file and a dictionary file for the specified collection name.
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the collection to create
          schema:
            type: string
            pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
            example: "my_collection"
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Collection 'my_collection' created successfully"
                  files:
                    type: object
                    properties:
                      configuration:
                        type: string
                        example: "configurations/my_collection.yaml"
                      dictionary:
                        type: string
                        example: "dictionaries/my_collection.1.0.0.yaml"
        '400':
          description: Invalid collection name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/dictionaries/:
    get:
      summary: List all Dictionaries
      operationId: list_dictionaries
      responses:
        '200':
          description: List of dictionaries configuration files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    patch:
      summary: Clean all Dictionaries
      operationId: clean_dictionaries
      responses:
        '200':
          description: All dictionaries cleaned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
  /api/dictionaries/{file_name}/:
    get:
      summary: Get a dictionary 
      operationId: get_dictionary
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dictionary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dictionary'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    put:
      summary: Save a dictionary
      operationId: save_dictionary
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dictionary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dictionary'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    delete:
      summary: Delete a dictionary
      operationId: delete_dictionary
      parameters:
        - name: file_name
          in: path
          required: true
      responses:
        '200':
          description: Dictionary deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events' 
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    patch:
      summary: Lock/Unlock a dictionary
      operationId: lock_unlock_dictionary
      parameters:
        - name: file_name
          in: path
          required: true  
          schema:
            type: string
      responses:
        '200':
          description: Dictionary locked/unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'

  /api/types/:
    get:
      summary: List all Types
      operationId: list_types
      responses:
        '200':
          description: List of type files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    patch:
      summary: Clean all Types
      operationId: clean_types
      responses:
        '200':
          description: All types cleaned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
  /api/types/{file_name}/:
    get:
      summary: Get a type 
      operationId: get_type
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/type'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    put:
      summary: Save a type
      operationId: save_type
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/type'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    delete:
      summary: Delete a type
      operationId: delete_type
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Type deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    patch:
      summary: Lock/Unlock a type
      operationId: lock_unlock_type
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Type locked/unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'

  /api/test_data/:
    get:
      summary: List all Test Data Files
      operationId: list_data_files
      responses:
        '200':
          description: List of test data files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
  /api/test_data/{file_name}/:
    get:
      summary: Get a test data file 
      operationId: get_data_file
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test Data File
          content:
            application/json:
              schema:
                type: array
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    put:
      summary: Save a test data file
      operationId: save_data_file
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test Data File
          content:
            application/json:
              schema:
                type: array
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    delete:
      summary: Delete a test data file
      operationId: delete_data_file
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test Data File deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    patch:
      summary: Lock/Unlock a test data file
      operationId: lock_unlock_data_file
      parameters:
        - name: file_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test Data File locked/unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
        '500':
          description: Processing error
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/events'

  /api/health:
    get:
      summary: Health check endpoint
      description: Returns Prometheus-formatted metrics for monitoring
      operationId: health_check
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Processing error
  /api/config:
    get:
      summary: Get current configuration
      operationId: get_config
      responses:
        '200':
          description: Current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        '500':
          description: Processing error

  /api/enumerators/:
    get:
      summary: Get all Enumerators
      operationId: get_enumerators
      responses:
        '200':
          description: Enumerators data
          content:
            application/json:
              schema:
                type: array
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    put:
      summary: Save Enumerators
      operationId: save_enumerators
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
      responses:
        '200':
          description: Enumerators saved successfully
          content:
            application/json:
              schema:
                type: array
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
    patch:
      summary: Clean Enumerators
      operationId: clean_enumerators
      responses:
        '200':
          description: Enumerators cleaned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'

components:
  schemas:
    files:
      type: array
      items:
        $ref: '#/components/schemas/file'
    file:
      type: object
      properties:
        name:
          type: string
        read_only:
          type: boolean
          default: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        size:
          type: number
          description: Size in bytes
    configuration:
      description: SchemaManager Collection Configuration
      type: object
      required:
        - name
        - versions
      properties:
        name:
          description: The name of the MongoDB collection
          type: string
        description:
          description: A description of the MongoDB collection
          type: string
        versions:
          description: List of version configurations in chronological order
          type: array
          items:
            type: object
            description: Configuration for a specific version
            properties:
              version:
                description: Version string in format major.minor.patch.schema
                type: string
              drop_indexes:
                description: List of index names to drop in this version
                type: array
                items:
                  type: string
              aggregations:
                description: List of aggregation pipelines to run for this version. 
                type: array
                items:
                  description: Aggregate pipelines are defined at https://www.mongodb.com/docs/manual/aggregation/
              add_indexes:
                description: List of indexes to add in this version. 
                type: array
                items:
                  description: Index items are defined at https://www.mongodb.com/docs/manual/indexes/
              test_data:
                description: Name of the test data file for this version
                type: string
    dictionary:
      description: A Simple Schema Dictionary
      type: object
      properties:
        '$ref': 
          description: Reference to another dictionary
          type: string
        description:
          description: A description of the property
          type: string
        name:
          description: The name of the property
          type: string
        type:
          description: The type of the property
          type: string
          enum: 
            - object
            - array
            - enum
            - enum_list
            - TYPE
        properties:
          description: Properties of an Object type
          type: object
          properties:
            $ref: '#/components/schemas/dictionary'
        items:
          description: Items of an Array type
          type: array
          items:
            $ref: '#/components/schemas/dictionary'
        enum:
          description: Enum name for enum or enum_list types
          type: string
        required:
          description: Whether the property is required
          type: boolean
          default: false
        additionalProperties:
          description: Whether the property is an additional property
          type: boolean
          default: false
      required:
        - description
        - name
        - type
    type:
      description: A Type definition - must be one of three valid forms
      type: object
      properties:
        description:
          description: A description of the type
          type: string
        # Universal Primitive - schema only
        schema:
          description: Universal primitive schema (mutually exclusive with json_type/bson_type)
          type: object
          additionalProperties: true
        # Typed Primitive - json_type/bson_type only  
        json_type:
          description: JSON schema definition (mutually exclusive with schema)
          type: object
          additionalProperties: true
        bson_type:
          description: BSON schema definition (mutually exclusive with schema)
          type: object
          additionalProperties: true
        # Complex Type - object or array
        type:
          description: Type of complex type (object or array)
          type: string
          enum: [object, array]
        properties:
          description: Properties for object types
          type: object
          additionalProperties:
            $ref: '#/components/schemas/type'
        items:
          description: Items definition for array types
          $ref: '#/components/schemas/type'
        required:
          description: Whether the type is required
          type: boolean
          default: false
        additionalProperties:
          description: Whether additional properties are allowed (for object types)
          type: boolean
          default: false
      required:
        - description
    primitive_type:
      description: A Simple Schema Primitive Type
      type: object
      properties:
        title:
          description: The name of the type
          type: string
        type:
          description: A Universal Type 
          type: object
          additionalProperties: true
        json_type:
          description: Type rendered as JSON Schema
          type: object
          additionalProperties: true
        bson_type:
          description: Type rendered as BSON Schema
          type: object
          additionalProperties: true
    events:
      description: Array of processing or validation events
      type: array
      items:
        type: object
        description: Result of a single processing or validation operation
        required:
          - operation
          - status
        properties:
          operation:
            description: Type of operation performed
            type: string
          status:
            description: Operation status
            type: string
            enum:
              - success
              - error
              - skipped
          collection:
            description: Collection name affected by the operation
            type: string
          message:
            description: Human-readable status message
            type: string
          details_type:
            description: Type of details for complex operations
            type: string
          details:
            description: Operation-specific details (object or array)
            oneOf:
              - type: object
                additionalProperties: true
              - type: array
                items:
                  type: object
                  additionalProperties: true
    config:
      type: object
      properties:
        config_items:
          type: array
          items:
            type: object
            properties:
              name:
                description: Configuration item name
                type: string
              value:
                description: Configuration value (or "secret" for sensitive values)
                type: string
              from:
                description: Source of the configuration value
                type: string
                enum:
                  - default
                  - file
                  - environment
        token:
          type: object
          properties:
            user_id:
              description: Logged in user_id value
              type: string
            from_ip:
              description: User's current IP address
              type: string
            roles:
              description: User's RBAC roles
              type: array
              items:
                type: string

